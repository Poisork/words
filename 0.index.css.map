{"version":3,"sources":["webpack://./src/App.vue","webpack://./src/pages/Auth.vue","webpack://./src/components/Timer.vue","webpack://./src/containers/Word.vue","webpack://./src/containers/DictionaryWords.vue","webpack://./src/containers/DictionaryTable.vue","webpack://./src/containers/RepeatWords.vue","webpack://./src/containers/checkBoxesPartOfSpeech.vue","webpack://./src/containers/UpdateWord.vue","webpack://./src/containers/UpdateWords.vue","webpack://./src/pages/Words.vue","webpack://./src/containers/Friends.vue","webpack://./src/index.scss"],"names":[],"mappings":"AAkCA,WACA,uBACA,CAIA,QACA,yBAAA,CACA,eAAA,CACA,SACA,CAEA,sCAGA,uBAAA,CADA,2BAEA,CAEA,mBACA,oBACA,CAEA,+BAEA,SACA,CCuGA,4DACA,YACA,CAEA,uBACA,iBACA,CAEA,0BAEA,UAAA,CADA,iBAEA,CAEA,0CACA,2BACA,CAEA,0CACA,0CACA,CAEA,8EAGA,SAAA,CADA,0BAEA,CCnIA,oBACA,eACA,CAEA,oBACA,oBAAA,CACA,SACA,CAEA,oBACA,aAAA,CACA,WACA,CAEA,mBACA,aACA,CCjEU,iMACE,oBAAA,CACA,8BAAA,CAGF,qMAEE,gBAAA,CADA,uBACA,CAON,yLACE,qBAAA,CAOE,uKACE,gBAAA,CACA,8BAAA,CAGF,2KAEE,gBAAA,CADA,mBACA,CAMR,yFACE,cAAA,CAKN,uBACE,YAAA,CACA,qBAAA,CAIF,8BACE,mBAAA,CAGF,uBACE,0BAAA,CC6BF,oBACA,eACA,CAEA,oBACA,oBAAA,CACA,SACA,CAEA,oBACA,aAAA,CACA,WACA,CAEA,mBACA,aACA,CChGc,sFACE,gBAAA,CASd,kCACE,eAAA,CAGF,kCACE,oBAAA,CACA,SAAA,CAGF,kCACE,aAAA,CACA,WAAA,CAGF,iCACE,aAAA,CC5BI,iGACE,oBAAA,CACA,8BAAA,CAOF,oFACE,gBAAA,CACA,8BAAA,CAOV,8BACE,mBAAA,CAGF,uBACE,0BAAA,CCvBM,iGACE,oBAAA,CACA,8BAAA,CAOF,oFACE,gBAAA,CACA,8BAAA,CAOV,8BACE,mBAAA,CAGF,uBACE,0BAAA,CCvBM,iGACE,oBAAA,CACA,8BAAA,CAOF,oFACE,gBAAA,CACA,8BAAA,CAOV,8BACE,mBAAA,CAGF,uBACE,0BAAA,CCvBM,iGACE,oBAAA,CACA,8BAAA,CAOF,oFACE,gBAAA,CACA,8BAAA,CAOV,8BACE,mBAAA,CAGF,uBACE,0BAAA,CCgIF,QACA,eAAA,CACA,QAAA,CACA,SACA,CAEA,yBACA,QAGA,QAAA,CAFA,cAAA,CACA,SAEA,CACA,CCuCA,gBACA,cACA,CCjNA,0CACE,wBAAA,CAGF,2CACE,wBAAA,CAIF,2CACE,wBAAA,CAKF,0CACE,qBAAA","file":"0.index.css","sourcesContent":["<template>\n  <v-theme-provider>\n    <v-app id=\"app\">\n      <Toolbar />\n\n      <transition name=\"fade\">\n        <router-view />\n      </transition>\n      \n      <router-view class=\"view Overlay\" name=\"overlay\" />\n\n    </v-app>\n  </v-theme-provider>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from \"vue-property-decorator\";\nimport Toolbar from \"./containers/Toolbar.vue\";\n \n// картинки по слову\n// https://www.google.com/search?hl=en&tbm=isch&q=meticulously\n\n@Component<App>({\n  name: \"App\",\n  components: {\n    Toolbar\n  }\n})\nexport default class App extends Vue {\n\n}\n</script>\n<style>\n@import './index.scss';\n.v-tooltip {\n  display: unset !important;\n}\n\n\n\n.header {\n  position: sticky !important;\n  top: 0 !important;\n  z-index: 2;\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition-property: opacity;\n  transition-duration: 0.3s;\n}\n\n.fade-enter-active {\n  transition-delay: 0.3s;\n}\n\n.fade-enter,\n.fade-leave-active {\n  opacity: 0;\n}\n</style>\n","<template>\n  <div class=\"Auth\">\n    <!-- <Login> <v-btn color=\"red\" class=\"white--text\" >Login</v-btn></Login> -->\n    <v-container fluid fill-height>\n      <v-layout align-center justify-center>\n        <v-flex xs12 sm8 md4>\n          <v-card class=\"elevation-12 card\" min-height=\"430\">\n            <v-toolbar dark :color=\"mainColor\">\n              <v-toolbar-title >{{authAction}} form</v-toolbar-title>\n            </v-toolbar>\n            <v-card-text>\n              <v-form @submit.prevent=\"isLogin ? loginHandler : registrationHandler\" id=\"auth-form\" color=\"dark\">\n\n                <v-text-field v-model=\"username\" color=\"blue\" label=\"Username\"\n                  :rules=\"[nameCheck || 'Use eng words or numbers']\"></v-text-field>\n                <v-text-field v-model=\"email\" color=\"blue\" label=\"Email\" :rules=\"[emailCheck || 'Incorrect email']\">\n                </v-text-field>\n\n                <v-text-field v-model=\"password\" color=\"blue\" label=\"Password\" type=\"password\" :rules=\"[required]\">\n                </v-text-field>\n\n                <transition name=\"fade\" mode=\"out-in\">\n\n                  <v-text-field v-show=\"!isLogin\" v-model=\"confirmPassword\" color=\"blue\" label=\"Confirm password\"\n                    type=\"password\" :rules=\"[required]\"></v-text-field>\n\n                </transition>\n              </v-form>\n            </v-card-text>\n            <v-card-actions class=\"actions\" style=\"width: 100%\">\n              <v-btn color=\"dark\" class=\"white--text mr-auto\" @click=\"isLogin = !isLogin\">\n                switch to\n                {{differentAction}}</v-btn>\n\n              <v-btn v-if=\"isLogin\" color=\"warning\" class=\"white--text\" @click=\"loginHandler\" :disabled=\"!canLogin\"\n                type=\"submit\" form=\"auth-form\">\n                Login\n              </v-btn>\n\n              <v-btn v-else color=\"warning\" class=\"white--text\" @click=\"registrationHandler\" :disabled=\"!canRegistration\"\n                type=\"submit\" form=\"auth-form\">\n                Registration\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-flex>\n      </v-layout>\n    </v-container>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Observable } from \"rxjs\";\nimport { tap, throttleTime } from \"rxjs/operators\";\nimport { Vue, Component } from \"vue-property-decorator\";\nimport { State, namespace } from \"vuex-class\";\nimport { userActions, UserPayload } from \"../store/modules/user/types\";\nimport Login from \"./../components/auth/Login.vue\";\nconst User = namespace(\"user\");\n// const Repetitions = namespace(\"repetitions\");\n\n\n@Component<Auth>({\n  name: \"Auth\",\n  domStreams: ['registration$', 'login$'],\n  components: {\n    Login\n  },\n  subscriptions() {\n\n    const loginStream$ = this.login$.pipe(\n      throttleTime(3000),\n      tap(this.loginHandler)\n    )\n\n\n    const registrationStream$ = this.registration$.pipe(\n      throttleTime(3000),\n      tap(this.registrationHandler)\n    )\n    return {\n      loginStream$,\n      registrationStream$\n    }\n  },\n})\nexport default class Auth extends Vue {\n  registration$!: Observable<MouseEvent>;\n  login$!: Observable<MouseEvent>;\n\n  username = ''\n  email = ''\n  password = ''\n  confirmPassword = ''\n  isLogin = true\n  mainColor = 'orange'\n\n  @User.Action(userActions.LOGIN)\n  login!: (payload: UserPayload) => Promise<any>;\n\n  @User.Action(userActions.REGISTRATION)\n  registration!: (payload: UserPayload) => Promise<any>;\n\n  loginHandler() {\n    const { email, username, password } = this\n    this.login({ email: email.trim(), username: username.trim(), password: password.trim() })\n  }\n\n  registrationHandler() {\n    const { email, username, password } = this\n    this.registration({\n      email: email.trim(),\n      username: username.trim(),\n      password: password.trim(),\n    })\n  }\n\n  get required() {\n    if (!this.isLogin) {\n      return this.password === this.confirmPassword\n    }\n    return !!this.password\n    // return !!this. || 'Required.'\n  }\n\n  get authAction() {\n    return this.isLogin ? 'Login' : 'Registration'\n  }\n\n  get differentAction() {\n    return this.isLogin ? 'registration' : 'login'\n  }\n\n  get emailCheck() {\n    const pattern = /\\S+@\\S+\\.\\S+/\n    return pattern.test(this.email)\n  }\n\n  get nameCheck() {\n    const pattern = /^[a-zA-Z0-9]+$/\n    return pattern.test(this.username)\n  }\n\n\n  get passwordsCheck() {\n    if (this.password.length && this.confirmPassword.length) {\n      return this.password === this.confirmPassword\n    }\n    return false\n  }\n\n  get canLogin() {\n    return this.emailCheck && this.nameCheck && this.password.length\n  }\n\n  get canRegistration() {\n    return this.canLogin && this.passwordsCheck\n  }\n\n}\n</script>\n<style scoped>\n.fill-height {\n  height: 100vh;\n}\n\n.card {\n  position: relative;\n}\n\n.actions {\n  position: absolute;\n  bottom: 1px;\n}\n\n.slide-fade-enter-active {\n  transition: all 0.3s ease-out;\n}\n\n.slide-fade-leave-active {\n  transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);\n}\n\n.slide-fade-enter-from,\n.slide-fade-leave-to {\n  transform: translateX(20px);\n  opacity: 0;\n}\n</style>\n  ","<template>\n  <div>\n    <slot></slot>\n    <span v-if=\"time\">{{formattedTime}}</span>\n  </div>\n \n</template>\n<script lang='ts'>\nimport { interval } from 'rxjs'; \nimport { take } from 'rxjs/operators';\nimport { Vue, Component, Prop, Emit } from 'vue-property-decorator'\n \n\n@Component<Timer>({\n  name: \"Timer\", \n})\nexport default class Timer extends Vue {\n \n  time = 0\n \n  @Prop({default: 5})\n  propTime!: number\n\n  @Prop({default: false})\n  reverse!: boolean\n  \n  @Emit('changeRepetition')\n  changeRepetition() { }\n\n  beforeUpdate() {\n    console.log('beforeUpdate : TIMER')\n  }\n\n  get formattedTime() {\n    if (this.time < 3600 ) {\n      return new Date(this.time * 1000).toISOString().substring(14, 19)\n    } else  {\n      new Date(this.time * 1000).toISOString().substring(11, 16)\n    }\n  }\n\n  created() {\n    this.time = this.propTime\n    this.$subscribeTo(interval(1000).pipe(take(this.propTime)), () => {\n      const mathAction = this.reverse ? -1 : 1;\n \n      this.time = this.time + mathAction;\n    })\n \n  }\n \n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: block;\n  margin: 20px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n ","\n.theme--light,\n.theme--dark {\n  ::v-deep {\n    .v-input--is-label-active {\n      .v-input__control {\n        .v-input__slot {\n          &::before {\n            border-color: rgb(139, 205, 52);\n            border-top-width: 2px !important;\n          }\n\n          fieldset {\n            color: rgb(139, 205, 52) !important;\n            border: 2px solid;\n          }\n        }\n      }\n    }\n\n    .v-input--switch.v-input--is-disabled {\n      .v-input--switch__thumb {\n        color: green !important;\n      }\n    }\n\n    .error--text {\n      .v-input__control {\n        .v-input__slot {\n          &::before {\n            border-color: red;\n            border-top-width: 2px !important;\n          }\n\n          fieldset {\n            color: red !important;\n            border: 2px solid;\n          }\n        }\n      }\n    }\n\n    .v-text-field {\n      max-width: 50px;\n    }\n  }\n}\n\n.word {\n  display: flex;\n  flex-direction: column;\n  // transition: max-height 2s ease-in-out 5s;\n}\n\n.error--text {\n  color: red !important;\n}\n\ninput {\n  caret-color: white !important;\n}\n","<template>\r\n  <div>\r\n    <v-row>\r\n      <v-col cols=\"3\"  >\r\n        <v-select multiple :items=\"themes\" v-model=\"currentThemes\" label=\"Filter words by theme\" solo></v-select>\r\n      </v-col>\r\n    </v-row>\r\n    <v-row>\r\n      <v-col cols=\"12\" sm=\"12\" md=\"6\" lg=\"4\"\r\n        v-for=\"{word, translate, partsOfSpeech, themes, otherTranslates} in filteredDictionary\" :key=\"word\">\r\n\r\n        <Word @updateRepetitionWord=\"updateRepetitionWord\" @repeatAtStart=\"repeatAtStart\" :partsOfSpeech=\"partsOfSpeech\"\r\n          :otherTranslates=\"otherTranslates\" :partOfSpeech=\"getPartOfSpeech(word, translate)\" :themes='themes'\r\n          :word=\"word\" :isTranslate=\"isTranslate\" :translateVal=\"translate\" />\r\n\r\n      </v-col>\r\n    </v-row>\r\n  </div>\r\n</template>\r\n<script lang='ts'>\r\nimport { Vue, Component, Prop, Emit } from 'vue-property-decorator'\r\nimport { IDictionary } from '../interfaces';\r\nimport {  namespace } from 'vuex-class';\r\nimport Word from './Word.vue';\r\nimport { changeRepetition, repetitionsActions } from '../store/modules/repetitions/types';\r\n\r\nconst Repetitions = namespace('repetitions');\r\nconst Dictionaries = namespace('dictionaries');\r\n\r\n@Component({\r\n  name: \"DictionaryWordsContainer\",\r\n  components: {\r\n    Word\r\n  }\r\n})\r\nexport default class DictionaryWordsContainer extends Vue {\r\n  @Prop()\r\n  dictionary!: IDictionary\r\n\r\n  @Prop({\r\n    default: false\r\n  })\r\n  isTranslate!: boolean\r\n\r\n  currentThemes: string[] = []\r\n\r\n  @Prop({\r\n    default: false\r\n  })\r\n  allThemes!: string[]\r\n\r\n  get themes() {\r\n\r\n    return this.allThemes.concat('default')\r\n  }\r\n\r\n  get filteredDictionary() {\r\n    if (this.currentThemes.includes('default') || !this.currentThemes.length) {\r\n      return Object.values(this.dictionary)\r\n    }\r\n    return Object.values(this.dictionary).filter((word) => {\r\n      if (word.themes) {\r\n        return Object.keys(word.themes).filter(theme => this.currentThemes.includes(theme)).length\r\n        // return word.theme === this.theme\r\n      }\r\n      return false\r\n    })\r\n  }\r\n\r\n  getPartOfSpeech(word: string, translate: string) {\r\n    return this.dictionary[word].partsOfSpeech[this.isTranslate ? translate : word].partOfSpeech\r\n  }\r\n\r\n  @Repetitions.Action(repetitionsActions.REPEAT_AT_START)\r\n  repeatAtStart!: (payload: changeRepetition) => Promise<any>\r\n\r\n  @Repetitions.Action(repetitionsActions.UPDATE_WORD)\r\n  updateRepetitionWord!: (payload: changeRepetition) => Promise<any>\r\n\r\n  beforeUpdate() {\r\n    console.log('beforeUpdate : DictionaryWords', this.isTranslate)\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\nli {\r\n  display: block;\r\n  margin: 20px;\r\n}\r\n\r\na {\r\n  color: #42b983;\r\n}\r\n</style>\r\n ","\r\n.theme--light {\r\n  .v-data-table {\r\n    ::v-deep {\r\n      .v-data-table__wrapper {\r\n        table {\r\n          thead {\r\n            tr {\r\n              th {\r\n                text-align: start;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  h3 {\r\n    margin: 40px 0 0;\r\n  }\r\n\r\n  ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n\r\n  li {\r\n    display: block;\r\n    margin: 20px;\r\n  }\r\n\r\n  a {\r\n    color: #42b983;\r\n  }\r\n\r\n\r\n}\r\n","\n.theme--light {\n  ::v-deep {\n    .v-input--is-label-active {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: rgb(139, 205, 52);\n          border-top-width: 2px !important;\n        }\n      }\n    }\n\n    .error--text {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: red;\n          border-top-width: 2px !important;\n        }\n      }\n    }\n  }\n}\n\n.error--text {\n  color: red !important;\n}\n\ninput {\n  caret-color: white !important;\n}\n","\n.theme--light {\n  ::v-deep {\n    .v-input--is-label-active {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: rgb(139, 205, 52);\n          border-top-width: 2px !important;\n        }\n      }\n    }\n\n    .error--text {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: red;\n          border-top-width: 2px !important;\n        }\n      }\n    }\n  }\n}\n\n.error--text {\n  color: red !important;\n}\n\ninput {\n  caret-color: white !important;\n}\n","\n.theme--light {\n  ::v-deep {\n    .v-input--is-label-active {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: rgb(139, 205, 52);\n          border-top-width: 2px !important;\n        }\n      }\n    }\n\n    .error--text {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: red;\n          border-top-width: 2px !important;\n        }\n      }\n    }\n  }\n}\n\n.error--text {\n  color: red !important;\n}\n\ninput {\n  caret-color: white !important;\n}\n","\n.theme--light {\n  ::v-deep {\n    .v-input--is-label-active {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: rgb(139, 205, 52);\n          border-top-width: 2px !important;\n        }\n      }\n    }\n\n    .error--text {\n      .v-input__control {\n        .v-input__slot:before {\n          border-color: red;\n          border-top-width: 2px !important;\n        }\n      }\n    }\n  }\n}\n\n.error--text {\n  color: red !important;\n}\n\ninput {\n  caret-color: white !important;\n}\n","<template>\n  <div class=\"Words\">\n    <!-- {{$vuetify.breakpoint.name}} -->\n    <v-tabs v-model=\"tab\"    :show-arrows=\"$vuetify.breakpoint.mobile\" color=\"orange\">\n      <v-tabs-slider color=\"orange\"></v-tabs-slider>\n      <v-tab v-for=\"item in items\" :key=\"item\" >\n        {{ item }}\n      </v-tab>\n    </v-tabs>\n\n    <v-progress-linear color=\"deep-purple accent-4\" v-if=\"makeRequest\" indeterminate rounded height=\"6\"></v-progress-linear>\n\n    <v-tabs-items v-model=\"tab\" :show-arrows=\"false\" class=\"pa-4\" >\n      <!-- {{ interval$ }} -->\n      <!-- <v-btn v-stream:click=\"kek$\">kek </v-btn> -->\n      <v-tab-item key=\"Words\">\n        <DictionaryWords v-if=\"tab === 0\" :dictionary=\"dictionary.toObject()\" :allThemes='allThemesDictionary' :isTranslate=\"false\" />\n      </v-tab-item>\n\n      <v-tab-item key=\"Words_Translated\">\n        <DictionaryWords v-if=\"tab === 1\" :dictionary=\"translatedDictionary.toObject()\" :allThemes='allThemesTranslatedDictionary' :isTranslate=\"true\" />\n      </v-tab-item>\n\n      <v-tab-item key=\"Update_words\">\n        <UpdateWords   :staticDictionary=\"staticDictionary.toObject()\" @setPartOfSpeech=\"setPartOfSpeech\" />\n      </v-tab-item>\n\n      <v-tab-item key=\"Set_Words\">\n  \n          <SetWord />\n\n \n      </v-tab-item>\n\n      <v-tab-item key=\"Repeat_Words\" >\n        <RepeatWords  v-if=\"tab === 4\" :dictionary=\"dictionary.toObject()\" />\n      </v-tab-item>\n\n      <v-tab-item key=\"Repeat_Words_Translated\"  >\n        <RepeatWords v-if=\"tab === 5\" :dictionary=\"translatedDictionary.toObject()\" :isTranslate=\"true\" />\n      </v-tab-item>\n\n      <v-tab-item key=\"Dictionary\">\n        <DictionaryTable  v-if=\"tab === 6\" :dictionary=\"staticDictionary.toObject()\" :repetitions=\"repetitions.toObject()\" />\n      </v-tab-item>\n\n      <v-tab-item key=\"Dictionary_Translate\">\n        <DictionaryTable  v-if=\"tab === 7\" :dictionary=\"staticDictionary.toObject()\" :isTranslate=\"true\"\n          :repetitions=\"repetitions.toObject()\" />\n      </v-tab-item>\n \n    </v-tabs-items> \n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from \"vue-property-decorator\";\nimport DictionaryWords from \"../containers/DictionaryWords.vue\";\nimport DictionaryTable from \"../containers/DictionaryTable.vue\";\n\n// import Speech from 'speak-tts'\nimport { DictionaryValue } from \"../interfaces/Dictionary\";\nimport { getSpeechColor } from \"../utils/colorHelpers\";\nimport RepeatWords from \"../containers/RepeatWords.vue\";\n\nimport UpdateWords from \"../containers/UpdateWords.vue\";\nimport { Map } from \"immutable\";\nimport { ValueRepetition } from \"../interfaces/Repetitions\"; \nimport SetWord from \"../containers/SetWord.vue\";\nimport CheckBoxesPartOfSpeech from \"../containers/checkBoxesPartOfSpeech.vue\";\nimport { State, namespace } from \"vuex-class\";\nimport {\n  dictionariesActions,\n  wordMetaData,\n} from \"../store/modules/dictionaries/types\"; \nimport { userActions } from \"../store/modules/user/types\";\nimport { IDictionary } from \"../interfaces\";\nimport { partOfSpeechValues } from \"../interfaces/word\";\n\nconst Dictionaries = namespace(\"dictionaries\");\nconst Repetitions = namespace(\"repetitions\");\nconst User = namespace(\"user\");\nconst Utils = namespace('utils')\n\n// картинки по слову\n// https://www.google.com/search?hl=en&tbm=isch&q=meticulously\n\n@Component<Words>({\n  name: \"Words\",\n  components: {\n    DictionaryWords,\n    DictionaryTable,\n    RepeatWords,\n    UpdateWords,\n    SetWord,\n    CheckBoxesPartOfSpeech, \n  },\n})\nexport default class Words extends Vue {\n  public tab = 0; \n  items = [\n    \"Words\",\n    \"Words_Translated\",\n    \"Update_words\",\n    \"Set_Words\",\n    \"Repeat_Words\",\n    \"Repeat_Words_Translated\",\n    \"Dictionary\",\n    \"Dictionary_Translate\",\n  ];\n \n\n  @Dictionaries.State(\"dictionary\")\n  public dictionary!: Map<string, DictionaryValue>;\n\n  @Dictionaries.State(\"staticDictionary\")\n  public staticDictionary!: Map<string, DictionaryValue>;\n\n  // @Dictionaries.Getter(\"TRANSLATED_STATIC_LANGUAGE_DICTIONARY\")\n  // public staticTranslatedDictionary!: Map<string, DictionaryValue>;\n\n  @Dictionaries.Getter(\"TRANSLATED_LANGUAGE_DICTIONARY\")\n  public translatedDictionary!: Map<string, DictionaryValue>;\n\n  @Repetitions.State(\"repetitions\")\n  public repetitions!: Map<string, ValueRepetition>;\n\n  @Utils.State('makeRequest')\n  public makeRequest!: boolean;\n\n  @Dictionaries.Getter('ALL_THEMES_DICTIONARY') allThemesDictionary!: string[]\n\n  @Dictionaries.Getter('ALL_THEMES_TRANSLATED_DICTIONARY') allThemesTranslatedDictionary!: string[]\n\n\n  @Dictionaries.Action(dictionariesActions.SET_PART_OF_SPEECH)\n  setPartOfSpeech!: (payload: wordMetaData) => Promise<any>;\n\n\n  getSpeechColorHandler(partOfSpeech: partOfSpeechValues = \"noun\") {\n    return getSpeechColor(partOfSpeech);\n  }\n}\n</script>\n<style>\n/* .v-tooltip {\n  display: unset !important;\n} */\n\n/* position fixed for v-tabs header */\n/* .v-tabs {\n  position: sticky;\n  top: 0;\n  z-index: 2;\n} */\n/* position fixed for v-tabs header */\n.v-tabs{\n  position: sticky;\n  top: 64px;\n  z-index: 2;\n}\n\n@media (max-width: 768px)   {\n  .v-tabs{\n    position: fixed;\n    top: unset; \n    bottom: 0px;   \n}\n}\n</style>\n","<template>\n  <v-container>\n    <v-card class=\"my-10\" tile>\n\n      <v-list-item color=\"rgba(0, 0, 0, .4)\">\n        <v-list-item-content>\n          <v-row class=\"px-8 py-8\">\n\n            <v-col cols=\"12\">\n              <v-divider></v-divider>\n            </v-col>\n\n            <v-col cols=\"6\">\n              <v-list-item-subtitle>add friend:</v-list-item-subtitle>\n\n            </v-col>\n            <v-col cols=\"6\">\n              <v-combobox :items=\"friendsCandidates\" item-value=\"_id\" item-text=\"username\" v-model=\"potentialFriend\"\n                class=\"py-2\" dense clearable label=\"Find friend\"></v-combobox>\n              <v-btn @click=\"addFriendRequest\">add request be friend</v-btn>\n\n            </v-col>\n\n            <v-col cols=\"12\"  v-if=\"currentFriends.length\">\n              <v-divider></v-divider>\n            </v-col>\n\n            <v-col cols=\"6\" v-if=\"currentFriends.length\" class=\"currentFriends\">\n              <v-list-item-subtitle>Friends:</v-list-item-subtitle>\n\n            </v-col>\n\n            <v-col cols=\"6\" v-if=\"currentFriends.length\">\n              <div v-for=\"item, index in currentFriends\" :key='item.username'>\n\n                <h1 class=\"text-center\">{{item.username}}</h1>\n\n                <ImageCustom \n                  :img=\"item.avatar\" \n                  :altImg=\"defaultImage\" \n                  :rounded=\"true\"\n                  :width=\"'100'\"\n                  :height=\"'100'\" \n                />\n                <v-btn @click=\"declineFriend(item._id)\" icon color=\"error\" class=\"ml-15\">\n                  <v-icon>mdi-close-thick</v-icon>\n                </v-btn>\n                <v-divider v-if=\"currentFriends.length -1  !== index\"></v-divider>\n              </div>\n            </v-col>\n\n\n\n            <v-col cols=\"6\" v-if=\"requestsToFriends.length\" class=\"requestsToFriends\">\n              <v-list-item-subtitle>requests To Friends:</v-list-item-subtitle>\n\n            </v-col>\n            <v-col cols=\"6\" v-if=\"requestsToFriends.length\">\n              <div v-for=\"item, index in requestsToFriends\" :key='item.username'>\n\n                <h1 class=\"text-center\">{{item.username}}</h1>\n\n                <ImageCustom \n                  :img=\"item.avatar\" \n                  :altImg=\"defaultImage\" \n                  :rounded=\"true\"\n                  :width=\"'100'\"\n                  :height=\"'100'\" \n                />\n                <v-btn @click=\"acceptFriend(item._id)\" icon color=\"green\">\n                  <v-icon>mdi-check-bold</v-icon>\n                </v-btn>\n                <v-btn @click=\"declineFriend(item._id)\" icon color=\"error\">\n                  <v-icon>mdi-close-thick</v-icon>\n                </v-btn>\n                <v-divider v-if=\"requestsToFriends.length - 1 !== index\"></v-divider>\n              </div>\n            </v-col>\n\n            <v-col cols=\"12\" v-if=\"friendsPending.length\">\n              <v-divider></v-divider>\n            </v-col>\n\n            <v-col cols=\"6\" v-if=\"friendsPending.length\" class=\"FriendPending\">\n              <v-list-item-subtitle>sent friend requests:</v-list-item-subtitle>\n\n            </v-col>\n            <v-col cols=\"6\" v-if=\"friendsPending.length\">\n              <div v-for=\"item, index in friendsPending\" :key='item.username'>\n\n                <h1 class=\"text-center\">{{item.username}}</h1>\n\n         \n                  <ImageCustom \n                  :img=\"item.avatar\" \n                  :altImg=\"defaultImage\" \n                  :rounded=\"true\"\n                  :width=\"'100'\"\n                  :height=\"'100'\" \n                />\n               \n                  <v-btn @click=\"declineFriend(item._id)\" icon color=\"error\" class=\"ml-15\">\n                    <v-icon>mdi-close-thick</v-icon>\n                  </v-btn>\n             \n\n               \n                <v-divider v-if=\"friendsPending.length - 1 !== index\"></v-divider>\n              </div>\n            </v-col>\n\n            <v-col cols=\"12\">\n              <v-divider></v-divider>\n            </v-col>\n\n          </v-row>\n        </v-list-item-content>\n      </v-list-item>\n    </v-card>\n  </v-container>\n</template>\n\n\n<script lang=\"ts\">\nimport { Vue, Component } from \"vue-property-decorator\";\nimport { State, namespace } from \"vuex-class\";\nimport { State as UserState, userActions, userMutations } from './../store/modules/user/types';\nimport undefinedImage from './../assets/undefined.jpg'\nimport ImageCustom from \"../components/ImageCustom.vue\";\n\n// const Dictionaries = namespace(\"dictionaries\");\nconst UserData = namespace(\"user\");\n\n// картинки по слову\n// https://www.google.com/search?hl=en&tbm=isch&q=meticulously\n\n@Component<Friends>({\n  name: \"Friends\",\n  components: {\n    ImageCustom\n  },\n})\nexport default class Friends extends Vue {\n  defaultImage = undefinedImage\n  potentialFriend = ''\n\n  @UserData.State('user')\n  public user!: UserState['user']\n\n  @UserData.State((user) => user.friendsCandidates)\n  public friendsCandidates!: UserState['friendsCandidates']\n\n  @UserData.State((user) => user.friends)\n  public friends!: UserState['friends']\n\n\n  @UserData.Getter('REQUESTS_TO_FRIENDS')\n  public requestsToFriends!: () => any;\n\n\n  @UserData.Getter('FRIENDS_PENDING')\n  public friendsPending!: () => any;\n\n  @UserData.Getter('FRIENDS')\n  public currentFriends!: () => any;\n\n\n  @UserData.Action('GET_FRIENDS_CANDIDATES')\n  pullFriendsCandidates!: () => Promise<any>;\n\n  @UserData.Action('GET_FRIENDS')\n  pullFriends!: () => Promise<any>;\n\n  @UserData.Action('ADD_REQUEST_FRIEND')\n  addRequestBeFriend!: (val: string) => Promise<any>;\n\n  @UserData.Action('ACCEPT_FRIEND')\n  acceptFriendAction!: (val: string) => Promise<any>;\n\n  @UserData.Action('DECLINE_FRIEND')\n  declineFriendAction!: (val: string) => Promise<any>;\n\n  async created() {\n    await Promise.all([\n      this.pullFriendsCandidates(),\n      this.pullFriends()\n    ])\n  }\n\n\n  addFriendRequest() {\n    // this.changeLanguage(this.potentialFriend)\n    this.addRequestBeFriend(this.potentialFriend)\n    this.potentialFriend = ''\n  }\n\n  acceptFriend(user: any) {\n    this.acceptFriendAction(user)\n  }\n\n  declineFriend(user: any) {\n    this.declineFriendAction(user)\n  }\n\n}\n</script>\n<style>\n.paragraph-text {\n  font-size: 18px;\n}\n</style>",".Vue-Toastification__toast--default.green {\n  background-color: #51D527;\n}\n\n.Vue-Toastification__toast--default.orange {\n  background-color: #F4B53F;\n}\n\n\n.Vue-Toastification__toast--default.purple {\n  background-color: #ff6ee9;\n}\n\n\n\n.Vue-Toastification__toast--default.black {\n  background-color: black;\n}\n\n\n"]}